(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{305:function(t,s,a){t.exports=a.p+"assets/img/queue.5936e794.gif"},306:function(t,s,a){t.exports=a.p+"assets/img/enqueue.14fa14ec.gif"},307:function(t,s,a){t.exports=a.p+"assets/img/dequeue.20c7e275.gif"},377:function(t,s,a){"use strict";a.r(s);var n=a(15),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"시작하기-앞서"}},[t._v("시작하기 앞서")]),t._v(" "),s("p",[t._v("올해 두번째 글이네요. 더욱 정진하겠습니다. 기다리는 분이 계시긴 하더라고요..? 재밌게..는 아니고 유익하게 읽어주세요.")]),t._v(" "),s("img",{attrs:{src:a(305)}}),t._v(" "),s("h3",{attrs:{id:"queue"}},[t._v("Queue?")]),t._v(" "),s("p",[t._v("큐라는 것을 처음 들어본 것은 롤을 하면서였다. 매칭을 기디라는 것을 '큐잡는다' 라고 하는데, 그 이후로도 프로그래밍을 하다보면 큐는 자주 접하기 좋다. 2학년이 돼서 자료구조 강의를 들으며 C로 구현하는 Linear Queue에 대해 정리해보았다. Stack, LinkedList보다 우선하는 이유는 그냥 내일이 퀴즈라서 그렇다.")]),t._v(" "),s("h3",{attrs:{id:"adt"}},[t._v("ADT")]),t._v(" "),s("p",[t._v("Abstract Data Type으로, 추상적으로 데이터 타입을 정하는 하는 것이다. 앞으로 자료구조 관련 포스트에서는 설명을 생략한다.")]),t._v(" "),s("h3",{attrs:{id:"queue-adt"}},[t._v("Queue ADT")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("0개 이상의 요소들로 구성된 선형 리스트")])]),t._v(" "),s("li",[s("p",[t._v("연산")]),t._v(" "),s("ul",[s("li",[t._v("create(max_size) 최대 크기가 max_size인 empty queue 생성")]),t._v(" "),s("li",[t._v("init(q) queue q 초기화")]),t._v(" "),s("li",[t._v("is_empty(q)")]),t._v(" "),s("li",[t._v("is_full(q)")]),t._v(" "),s("li",[t._v("enqueue(q, e) 포화상태가 아니면 끝에 요소 e 추가")]),t._v(" "),s("li",[t._v("dequeue(q) 공백상태가 아니면 요소 제거")]),t._v(" "),s("li",[t._v("peek(q) q의 맨 앞에 있는 요소 반환")])]),t._v(" "),s("p",[t._v("LinkedQueue에서는 이 중 "),s("code",[t._v("init")]),t._v(", "),s("code",[t._v("is_empty")]),t._v(", "),s("code",[t._v("is_full")]),t._v(", "),s("code",[t._v("enqueue")]),t._v(", "),s("code",[t._v("dequeue")]),t._v(" 만 구현한다.")])])]),t._v(" "),s("h3",{attrs:{id:"linkedqueue"}},[t._v("LinkedQueue")]),t._v(" "),s("p",[t._v("이 포스트에서는 배열로는 구현하지 않을 것이다. 왜냐면 그냥 내일이 퀴즈기 때문이다. LinkedQueue는 LinkedList처럼 포인터를 이용해 구현된 Queue이다. LinkedQueue 구조체는 Queue의 맨앞과 맨뒤 요소의 주소를 참조해 맨뒤에 enqueue, 맨앞에 dequeue 시킬 수 있다.")]),t._v(" "),s("h3",{attrs:{id:"initialize"}},[t._v("Initialize")]),t._v(" "),s("p",[t._v("어떤 것이든 초기화를 잘 해주도록 하자. PPT 모핑으로 만든 위의 애니메이션을 보면 공백상태일 때는 front와 rear가 모두 -1을 가리키고 있다. 포인터로 구현하면 당연히 Queue는 초기상태, 즉 공백상태에는 NULL을 바라보게 될 것이다.")]),t._v(" "),s("h3",{attrs:{id:"포화와-공백상태"}},[t._v("포화와 공백상태")]),t._v(" "),s("p",[t._v("공백상태는 front == rear == NULL 인 상태이고, LinkedQueue로 구현하면 heap 영역이 허용하는 한도 내에서는 무한정 확장이 가능하므로 항상 포화상태가 아니다.")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkedQueueType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_full")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkedQueueType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h3",{attrs:{id:"삽입"}},[t._v("삽입")]),t._v(" "),s("p",[t._v("우선 Node를 동적할당 해준다. 그 다음에는 공백여부에 따라 갈리는데, 공백이면 새로운 노드를 front이자 rear 노드로 지정해준다. 공백이 아니면 현재 rear의 다음 노드로 지정해주고, 새로운 노드를 새로운 rear 노드로 지정해준다.")]),t._v(" "),s("img",{attrs:{src:a(306)}}),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkedQueueType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  QueueNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("QueueNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("QueueNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("link "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("link "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h3",{attrs:{id:"제거"}},[t._v("제거")]),t._v(" "),s("p",[t._v("제거는 삽입보다 더 간단하다. 그냥 데이터를 꺼내고, 새로운 front를 기존 front의 다음 노드로 지정해주고, 메모리 할당을 해제해주면 된다. 이때 새로 지정한 front가 NULL인 경우 공백상태이므로 rear 또한 NULL로 만들어준다.")]),t._v(" "),s("img",{attrs:{src:a(307)}}),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("element "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dequeue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LinkedQueueType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  QueueNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Queue is Empty."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    element data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("front"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("link"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 다음 노드를 현재의 front 노드로 지정")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is_empty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rear "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 공백으로 만들어주기.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);