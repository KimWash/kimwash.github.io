(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{296:function(t,s,n){t.exports=n.p+"assets/img/kmp.d24d63f1.png"},297:function(t,s,n){t.exports=n.p+"assets/img/1.3596a8b6.png"},298:function(t,s,n){t.exports=n.p+"assets/img/2.722c4779.png"},299:function(t,s,n){t.exports=n.p+"assets/img/3.5fbc2819.png"},300:function(t,s,n){t.exports=n.p+"assets/img/4.e5b99e14.png"},301:function(t,s,n){t.exports=n.p+"assets/img/5.3e68ff83.png"},302:function(t,s,n){t.exports=n.p+"assets/img/6.710e2a5c.png"},303:function(t,s,n){t.exports=n.p+"assets/img/7.af16db35.png"},389:function(t,s,n){"use strict";n.r(s);var a=n(15),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("img",{attrs:{src:n(296)}}),t._v(" "),s("h2",{attrs:{id:"직선적-스트링-탐색-알고리즘"}},[t._v("직선적 스트링 탐색 알고리즘")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\tj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\ti "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Match")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Not match")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("직선적 스트링 탐색 알고리즘은 텍스트를 순회하며 패턴과 일치하는지 확인하고,")]),t._v(" "),s("p",[t._v("일치하면 j를 증가시키며 패턴을 끝까지 순회하면 탐색에 성공한 것으로 본다.")]),t._v(" "),s("p",[t._v("일치하지 않으면 j를 0으로 만들어 패턴에 대한 순회를 처음부터 진행하게 한다.")]),t._v(" "),s("h3",{attrs:{id:"문제점"}},[t._v("문제점")]),t._v(" "),s("p",[t._v("일치하지 않은 경우 패턴에 대해 처음부터 다시 탐색하게 되는데, 이런 구조를 가져갈 경우 패턴과 의 비교 중에 불일치가 발생하면 "),s("strong",[t._v("일치하는 부분에 대한 정보를 버리고")]),t._v(", 처음부터 다시 비교를(j ← 0) 하게 된다. 아래와 같이 패턴이 짧은 경우는 큰 문제가 안되지만, 패턴이 길어지게 되면 꽤나 비효율적이게 된다.")]),t._v(" "),s("img",{attrs:{src:n(297)}}),t._v(" "),s("p",[t._v("직선적 알고리즘 동작과정")]),t._v(" "),s("h2",{attrs:{id:"아는건-두고-모르는-부분만-검사할래"}},[t._v("아는건 두고, 모르는 부분만 검사할래!")]),t._v(" "),s("p",[t._v("불일치가 발생하면 일치하는걸 아는 부분은 그대로 두고, 그 뒤에부터 체크하면 이 문제가 해결된다. 이러한 문제 해결 과정을 이용하는 알고리즘이 “KMP 알고리즘” 이다.")]),t._v(" "),s("h3",{attrs:{id:"next-배열-만들기"}},[t._v("next 배열 만들기")]),t._v(" "),s("p",[t._v("next 배열은 "),s("strong",[t._v("불일치가 발생했을 때 얼마나 앞으로 이동해야 하느냐")]),t._v(" 를 담고 있는 배열이다. “일치하는 것을 아는” 부분은 결국 “동일한 문자가 앞에 얼마나 있는가”에 대한 지표이다.")]),t._v(" "),s("p",[t._v("아래는 initNext 함수를 이용해 next 배열을 구하는 과정이다.")]),t._v(" "),s("p",[t._v("initNext 함수는 위/아래에 같은 패턴을 두고 이 둘을 비교하는 방식으로 작동하는데, 동작 과정은 다음과 같다.")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("불일치하면 아래 패턴을 오른쪽으로 이동")])]),t._v(" "),s("li",[s("p",[t._v("일치하면 패턴은 그대로 두고 아래 패턴에서 비교하는 커서를 이동")]),t._v(" "),s("p",[t._v("이 때 커서 왼쪽에 있는 일치하는 문자열의 갯수를 next[j]에 삽입")])])]),t._v(" "),s("img",{attrs:{src:n(298)}}),t._v(" "),s("img",{attrs:{src:n(299)}}),t._v(" "),s("h3",{attrs:{id:"유한-상태-장치"}},[t._v("유한 상태 장치")]),t._v(" "),s("p",[t._v("next 배열을 이용해 linkedlist 처럼 그려 놓은 구조도이다. 불일치가 발생하면 해당 위치에서 어디로 이동해야 하는지를 나타낸 것이다.")]),t._v(" "),s("img",{attrs:{src:n(300)}}),t._v(" "),s("p",[t._v("그런데 이 유한 상태 장치를 잘 살펴보면, 같은 문자의 위치로 이동하는 경우 다시 한번 비교를 해야 하므로 비효율적이다. 이 점을 개선해 이동한 자리의 next 노드로 이동해 더 나은 유한 상태 장치와 next 배열을 만들 수 있다.")]),t._v(" "),s("img",{attrs:{src:n(301)}}),t._v(" "),s("p",[t._v("아이디어")]),t._v(" "),s("img",{attrs:{src:n(302)}}),t._v(" "),s("p",[t._v("개선된 유한 상태 장치")]),t._v(" "),s("h3",{attrs:{id:"next-배열을-이용해-탐색하기"}},[t._v("next 배열을 이용해 탐색하기")]),t._v(" "),s("p",[s("code",[t._v("curr_pos")]),t._v("를 기준으로 "),s("code",[t._v("initNext[curr_pos]")]),t._v(" 만큼 왼쪽으로 이동시킨다. 양수는 왼쪽, 음수는 오른쪽으로 이동시킨다.")]),t._v(" "),s("img",{attrs:{src:n(303)}})])}),[],!1,null,null,null);s.default=e.exports}}]);